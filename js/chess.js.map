{"version":3,"file":"chess.umd.js","sources":["../node_modules/chess.js/dist/esm/chess.js"],"sourcesContent":["// @generated by Peggy 4.2.0.\n//\n// https://peggyjs.org/\n\n\n\n  function rootNode(comment) {\n  \treturn comment !== null ? { comment, variations: [] } : { variations: []}\n  }\n\n  function node(move, suffix, nag, comment, variations) {\n  \tconst node = { move, variations };\n\n    if (suffix) {\n    \tnode.suffix = suffix;\n    }\n\n    if (nag) {\n    \tnode.nag = nag;\n    }\n\n    if (comment !== null) {\n    \tnode.comment = comment;\n    }\n\n    return node\n  }\n\n  function lineToTree(...nodes) {\n  \tconst [root, ...rest] = nodes;\n\n    let parent = root;\n\n    for (const child of rest) {\n    \tif (child !== null) {\n        \tparent.variations = [child, ...child.variations];\n            child.variations = [];\n            parent = child;\n        }\n    }\n\n  \treturn root\n  }\n\n  function pgn(headers, game) {\n  \tif (game.marker && game.marker.comment) {\n    \tlet node = game.root;\n        while (true) {\n        \tconst next = node.variations[0];\n            if (!next) {\n            \tnode.comment = game.marker.comment;\n            \tbreak\n            }\n            node = next;\n        }\n    }\n\n  \treturn {\n    \theaders,\n        root: game.root,\n        result: (game.marker && game.marker.result) ?? undefined\n    }\n  }\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n  // istanbul ignore next Check is a necessary evil to support older environments\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n  if (str.length > targetLength) { return str; }\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function(sources) {\n  var str = \"Error: \" + this.message;\n  if (this.location) {\n    var src = null;\n    var k;\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n    var s = this.location.start;\n    var offset_s = (this.location.source && (typeof this.location.source.offset === \"function\"))\n      ? this.location.source.offset(s)\n      : s;\n    var loc = this.location.source + \":\" + offset_s.line + \":\" + offset_s.column;\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", offset_s.line.toString().length, ' ');\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      var hatLen = (last - s.column) || 1;\n      str += \"\\n --> \" + loc + \"\\n\"\n          + filler + \" |\\n\"\n          + offset_s.line + \" | \" + line + \"\\n\"\n          + filler + \" | \" + peg$padEnd(\"\", s.column - 1, ' ')\n          + peg$padEnd(\"\", hatLen, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n  return str;\n};\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n\n  var peg$startRuleFunctions = { pgn: peg$parsepgn };\n  var peg$startRuleFunction = peg$parsepgn;\n\n  var peg$c0 = \"[\";\n  var peg$c1 = \"\\\"\";\n  var peg$c2 = \"]\";\n  var peg$c3 = \".\";\n  var peg$c4 = \"O-O-O\";\n  var peg$c5 = \"O-O\";\n  var peg$c6 = \"0-0-0\";\n  var peg$c7 = \"0-0\";\n  var peg$c8 = \"$\";\n  var peg$c9 = \"{\";\n  var peg$c10 = \"}\";\n  var peg$c11 = \";\";\n  var peg$c12 = \"(\";\n  var peg$c13 = \")\";\n  var peg$c14 = \"1-0\";\n  var peg$c15 = \"0-1\";\n  var peg$c16 = \"1/2-1/2\";\n  var peg$c17 = \"*\";\n\n  var peg$r0 = /^[a-zA-Z]/;\n  var peg$r1 = /^[^\"]/;\n  var peg$r2 = /^[0-9]/;\n  var peg$r3 = /^[.]/;\n  var peg$r4 = /^[a-zA-Z1-8\\-=]/;\n  var peg$r5 = /^[+#]/;\n  var peg$r6 = /^[!?]/;\n  var peg$r7 = /^[^}]/;\n  var peg$r8 = /^[^\\r\\n]/;\n  var peg$r9 = /^[ \\t\\r\\n]/;\n\n  var peg$e0 = peg$otherExpectation(\"tag pair\");\n  var peg$e1 = peg$literalExpectation(\"[\", false);\n  var peg$e2 = peg$literalExpectation(\"\\\"\", false);\n  var peg$e3 = peg$literalExpectation(\"]\", false);\n  var peg$e4 = peg$otherExpectation(\"tag name\");\n  var peg$e5 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n  var peg$e6 = peg$otherExpectation(\"tag value\");\n  var peg$e7 = peg$classExpectation([\"\\\"\"], true, false);\n  var peg$e8 = peg$otherExpectation(\"move number\");\n  var peg$e9 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e10 = peg$literalExpectation(\".\", false);\n  var peg$e11 = peg$classExpectation([\".\"], false, false);\n  var peg$e12 = peg$otherExpectation(\"standard algebraic notation\");\n  var peg$e13 = peg$literalExpectation(\"O-O-O\", false);\n  var peg$e14 = peg$literalExpectation(\"O-O\", false);\n  var peg$e15 = peg$literalExpectation(\"0-0-0\", false);\n  var peg$e16 = peg$literalExpectation(\"0-0\", false);\n  var peg$e17 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"1\", \"8\"], \"-\", \"=\"], false, false);\n  var peg$e18 = peg$classExpectation([\"+\", \"#\"], false, false);\n  var peg$e19 = peg$otherExpectation(\"suffix annotation\");\n  var peg$e20 = peg$classExpectation([\"!\", \"?\"], false, false);\n  var peg$e21 = peg$otherExpectation(\"NAG\");\n  var peg$e22 = peg$literalExpectation(\"$\", false);\n  var peg$e23 = peg$otherExpectation(\"brace comment\");\n  var peg$e24 = peg$literalExpectation(\"{\", false);\n  var peg$e25 = peg$classExpectation([\"}\"], true, false);\n  var peg$e26 = peg$literalExpectation(\"}\", false);\n  var peg$e27 = peg$otherExpectation(\"rest of line comment\");\n  var peg$e28 = peg$literalExpectation(\";\", false);\n  var peg$e29 = peg$classExpectation([\"\\r\", \"\\n\"], true, false);\n  var peg$e30 = peg$otherExpectation(\"variation\");\n  var peg$e31 = peg$literalExpectation(\"(\", false);\n  var peg$e32 = peg$literalExpectation(\")\", false);\n  var peg$e33 = peg$otherExpectation(\"game termination marker\");\n  var peg$e34 = peg$literalExpectation(\"1-0\", false);\n  var peg$e35 = peg$literalExpectation(\"0-1\", false);\n  var peg$e36 = peg$literalExpectation(\"1/2-1/2\", false);\n  var peg$e37 = peg$literalExpectation(\"*\", false);\n  var peg$e38 = peg$otherExpectation(\"whitespace\");\n  var peg$e39 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false);\n\n  var peg$f0 = function(headers, game) { return pgn(headers, game) };\n  var peg$f1 = function(tagPairs) { return Object.fromEntries(tagPairs) };\n  var peg$f2 = function(tagName, tagValue) { return [tagName, tagValue] };\n  var peg$f3 = function(root, marker) { return { root, marker} };\n  var peg$f4 = function(comment, moves) { return lineToTree(rootNode(comment), ...moves.flat()) };\n  var peg$f5 = function(san, suffix, nag, comment, variations) { return node(san, suffix, nag, comment, variations) };\n  var peg$f6 = function(nag) { return nag };\n  var peg$f7 = function(comment) { return comment.replace(/[\\r\\n]+/g, \" \") };\n  var peg$f8 = function(comment) { return comment.trim() };\n  var peg$f9 = function(line) { return line };\n  var peg$f10 = function(result, comment) { return { result, comment } };\n  var peg$currPos = options.peg$currPos | 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = peg$currPos;\n  var peg$maxFailExpected = options.peg$maxFailExpected || [];\n  var peg$silentFails = options.peg$silentFails | 0;\n\n  var peg$result;\n\n  if (options.startRule) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      if (pos >= peg$posDetailsCache.length) {\n        p = peg$posDetailsCache.length - 1;\n      } else {\n        p = pos;\n        while (!peg$posDetailsCache[--p]) {}\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos, offset) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    var res = {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n    return res;\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsepgn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetagPairSection();\n    s2 = peg$parsemoveTextSection();\n    s0 = peg$f0(s1, s2);\n\n    return s0;\n  }\n\n  function peg$parsetagPairSection() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsetagPair();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsetagPair();\n    }\n    s2 = peg$parse_();\n    s0 = peg$f1(s1);\n\n    return s0;\n  }\n\n  function peg$parsetagPair() {\n    var s0, s2, s4, s6, s7, s8, s10;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s2 = peg$c0;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\n    }\n    if (s2 !== peg$FAILED) {\n      peg$parse_();\n      s4 = peg$parsetagName();\n      if (s4 !== peg$FAILED) {\n        peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c1;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e2); }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsetagValue();\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s8 = peg$c1;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e2); }\n          }\n          if (s8 !== peg$FAILED) {\n            peg$parse_();\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s10 = peg$c2;\n              peg$currPos++;\n            } else {\n              s10 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e3); }\n            }\n            if (s10 !== peg$FAILED) {\n              s0 = peg$f2(s4, s7);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagName() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r0.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e5); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = input.charAt(peg$currPos);\n        if (peg$r0.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e5); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagValue() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r1.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e7); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r1.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e7); }\n      }\n    }\n    s0 = input.substring(s0, peg$currPos);\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e6); }\n\n    return s0;\n  }\n\n  function peg$parsemoveTextSection() {\n    var s0, s1, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseline();\n    peg$parse_();\n    s3 = peg$parsegameTerminationMarker();\n    if (s3 === peg$FAILED) {\n      s3 = null;\n    }\n    peg$parse_();\n    s0 = peg$f3(s1, s3);\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecomment();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = [];\n    s3 = peg$parsemove();\n    while (s3 !== peg$FAILED) {\n      s2.push(s3);\n      s3 = peg$parsemove();\n    }\n    s0 = peg$f4(s1, s2);\n\n    return s0;\n  }\n\n  function peg$parsemove() {\n    var s0, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    peg$parse_();\n    peg$parsemoveNumber();\n    peg$parse_();\n    s4 = peg$parsesan();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$parsesuffixAnnotation();\n      if (s5 === peg$FAILED) {\n        s5 = null;\n      }\n      s6 = [];\n      s7 = peg$parsenag();\n      while (s7 !== peg$FAILED) {\n        s6.push(s7);\n        s7 = peg$parsenag();\n      }\n      s7 = peg$parse_();\n      s8 = peg$parsecomment();\n      if (s8 === peg$FAILED) {\n        s8 = null;\n      }\n      s9 = [];\n      s10 = peg$parsevariation();\n      while (s10 !== peg$FAILED) {\n        s9.push(s10);\n        s10 = peg$parsevariation();\n      }\n      s0 = peg$f5(s4, s5, s6, s8, s9);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveNumber() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r2.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e9); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = input.charAt(peg$currPos);\n      if (peg$r2.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n    }\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s2 = peg$c3;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r3.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e11); }\n      }\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = input.charAt(peg$currPos);\n        if (peg$r3.test(s5)) {\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\n        }\n      }\n      s1 = [s1, s2, s3, s4];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e8); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesan() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c4) {\n      s2 = peg$c4;\n      peg$currPos += 5;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e13); }\n    }\n    if (s2 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c5) {\n        s2 = peg$c5;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e14); }\n      }\n      if (s2 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c6) {\n          s2 = peg$c6;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e15); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c7) {\n            s2 = peg$c7;\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e16); }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = input.charAt(peg$currPos);\n            if (peg$r0.test(s3)) {\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e5); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = input.charAt(peg$currPos);\n              if (peg$r4.test(s5)) {\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e17); }\n              }\n              if (s5 !== peg$FAILED) {\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  s5 = input.charAt(peg$currPos);\n                  if (peg$r4.test(s5)) {\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e17); }\n                  }\n                }\n              } else {\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = input.charAt(peg$currPos);\n      if (peg$r5.test(s3)) {\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s2 = [s2, s3];\n      s1 = s2;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e12); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesuffixAnnotation() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = input.charAt(peg$currPos);\n    if (peg$r6.test(s2)) {\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e20); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (s1.length >= 2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = input.charAt(peg$currPos);\n        if (peg$r6.test(s2)) {\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e20); }\n        }\n      }\n    }\n    if (s1.length < 1) {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenag() {\n    var s0, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c8;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$currPos;\n      s4 = [];\n      s5 = input.charAt(peg$currPos);\n      if (peg$r2.test(s5)) {\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e9); }\n      }\n      if (s5 !== peg$FAILED) {\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = input.charAt(peg$currPos);\n          if (peg$r2.test(s5)) {\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e9); }\n          }\n        }\n      } else {\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s3 = input.substring(s3, peg$currPos);\n      } else {\n        s3 = s4;\n      }\n      if (s3 !== peg$FAILED) {\n        s0 = peg$f6(s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) { peg$fail(peg$e21); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parsebraceComment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserestOfLineComment();\n    }\n\n    return s0;\n  }\n\n  function peg$parsebraceComment() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c9;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r7.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e25); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r7.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e25); }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s3 = peg$c10;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e26); }\n      }\n      if (s3 !== peg$FAILED) {\n        s0 = peg$f7(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserestOfLineComment() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s1 = peg$c11;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r8.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e29); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = input.charAt(peg$currPos);\n        if (peg$r8.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e29); }\n        }\n      }\n      s2 = input.substring(s2, peg$currPos);\n      s0 = peg$f8(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e27); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariation() {\n    var s0, s2, s3, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    peg$parse_();\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c12;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e31); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseline();\n      if (s3 !== peg$FAILED) {\n        peg$parse_();\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s5 = peg$c13;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e32); }\n        }\n        if (s5 !== peg$FAILED) {\n          s0 = peg$f9(s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      if (peg$silentFails === 0) { peg$fail(peg$e30); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsegameTerminationMarker() {\n    var s0, s1, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c14) {\n      s1 = peg$c14;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e34); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c15) {\n        s1 = peg$c15;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e35); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c16) {\n          s1 = peg$c16;\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e36); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s1 = peg$c17;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e37); }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$parse_();\n      s3 = peg$parsecomment();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s0 = peg$f10(s1, s3);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e33); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    s1 = input.charAt(peg$currPos);\n    if (peg$r9.test(s1)) {\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e39); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = input.charAt(peg$currPos);\n      if (peg$r9.test(s1)) {\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e39); }\n      }\n    }\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e38); }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (options.peg$library) {\n    return /** @type {any} */ ({\n      peg$result,\n      peg$currPos,\n      peg$FAILED,\n      peg$maxFailExpected,\n      peg$maxFailPos\n    });\n  }\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\n/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst MASK64 = 0xffffffffffffffffn;\nfunction rotl(x, k) {\n    return ((x << k) | (x >> (64n - k))) & 0xffffffffffffffffn;\n}\nfunction wrappingMul(x, y) {\n    return (x * y) & MASK64;\n}\n// xoroshiro128**\nfunction xoroshiro128(state) {\n    return function () {\n        let s0 = BigInt(state & MASK64);\n        let s1 = BigInt((state >> 64n) & MASK64);\n        const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n);\n        s1 ^= s0;\n        s0 = (rotl(s0, 24n) ^ s1 ^ (s1 << 16n)) & MASK64;\n        s1 = rotl(s1, 37n);\n        state = (s1 << 64n) | s0;\n        return result;\n    };\n}\nconst rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en);\nconst PIECE_KEYS = Array.from({ length: 2 }, () => Array.from({ length: 6 }, () => Array.from({ length: 128 }, () => rand())));\nconst EP_KEYS = Array.from({ length: 8 }, () => rand());\nconst CASTLING_KEYS = Array.from({ length: 16 }, () => rand());\nconst SIDE_KEY = rand();\nconst WHITE = 'w';\nconst BLACK = 'b';\nconst PAWN = 'p';\nconst KNIGHT = 'n';\nconst BISHOP = 'b';\nconst ROOK = 'r';\nconst QUEEN = 'q';\nconst KING = 'k';\nconst DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nclass Move {\n    color;\n    from;\n    to;\n    piece;\n    captured;\n    promotion;\n    /**\n     * @deprecated This field is deprecated and will be removed in version 2.0.0.\n     * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n     * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n     * `isBigPawn`\n     */\n    flags;\n    san;\n    lan;\n    before;\n    after;\n    constructor(chess, internal) {\n        const { color, piece, from, to, flags, captured, promotion } = internal;\n        const fromAlgebraic = algebraic(from);\n        const toAlgebraic = algebraic(to);\n        this.color = color;\n        this.piece = piece;\n        this.from = fromAlgebraic;\n        this.to = toAlgebraic;\n        /*\n         * HACK: The chess['_method']() calls below invoke private methods in the\n         * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n         * code cleaner elsewhere.\n         */\n        this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }));\n        this.lan = fromAlgebraic + toAlgebraic;\n        this.before = chess.fen();\n        // Generate the FEN for the 'after' key\n        chess['_makeMove'](internal);\n        this.after = chess.fen();\n        chess['_undoMove']();\n        // Build the text representation of the move flags\n        this.flags = '';\n        for (const flag in BITS) {\n            if (BITS[flag] & flags) {\n                this.flags += FLAGS[flag];\n            }\n        }\n        if (captured) {\n            this.captured = captured;\n        }\n        if (promotion) {\n            this.promotion = promotion;\n            this.lan += promotion;\n        }\n    }\n    isCapture() {\n        return this.flags.indexOf(FLAGS['CAPTURE']) > -1;\n    }\n    isPromotion() {\n        return this.flags.indexOf(FLAGS['PROMOTION']) > -1;\n    }\n    isEnPassant() {\n        return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;\n    }\n    isKingsideCastle() {\n        return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;\n    }\n    isQueensideCastle() {\n        return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;\n    }\n    isBigPawn() {\n        return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;\n    }\n}\nconst EMPTY = -1;\nconst FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n    NULL_MOVE: '-',\n};\n// prettier-ignore\nconst SQUARES = [\n    'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n    'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n    'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n    'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n    'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n    'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n    'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n    'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n];\nconst BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n    NULL_MOVE: 128,\n};\n/* eslint-disable @typescript-eslint/naming-convention */\n// these are required, according to spec\nconst SEVEN_TAG_ROSTER = {\n    Event: '?',\n    Site: '?',\n    Date: '????.??.??',\n    Round: '?',\n    White: '?',\n    Black: '?',\n    Result: '*',\n};\n/**\n * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be\n * eliminated in getHeaders()\n */\nconst SUPLEMENTAL_TAGS = {\n    WhiteTitle: null,\n    BlackTitle: null,\n    WhiteElo: null,\n    BlackElo: null,\n    WhiteUSCF: null,\n    BlackUSCF: null,\n    WhiteNA: null,\n    BlackNA: null,\n    WhiteType: null,\n    BlackType: null,\n    EventDate: null,\n    EventSponsor: null,\n    Section: null,\n    Stage: null,\n    Board: null,\n    Opening: null,\n    Variation: null,\n    SubVariation: null,\n    ECO: null,\n    NIC: null,\n    Time: null,\n    UTCTime: null,\n    UTCDate: null,\n    TimeControl: null,\n    SetUp: null,\n    FEN: null,\n    Termination: null,\n    Annotator: null,\n    Mode: null,\n    PlyCount: null,\n};\nconst HEADER_TEMPLATE = {\n    ...SEVEN_TAG_ROSTER,\n    ...SUPLEMENTAL_TAGS,\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\nconst PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n};\nconst PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n};\n// prettier-ignore\nconst ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\n];\n// prettier-ignore\nconst RAYS = [\n    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\n    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\n    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\n    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\n    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\n    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\n    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\n    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\n    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\n    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\n];\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n    [KING]: BITS.KSIDE_CASTLE,\n    [QUEEN]: BITS.QSIDE_CASTLE,\n};\nconst ROOKS = {\n    w: [\n        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n};\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 };\nconst SAN_NULLMOVE = '--';\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n    return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n    return square & 0xf;\n}\nfunction isDigit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n    const f = file(square);\n    const r = rank(square);\n    return ('abcdefgh'.substring(f, f + 1) +\n        '87654321'.substring(r, r + 1));\n}\nfunction swapColor(color) {\n    return color === WHITE ? BLACK : WHITE;\n}\nfunction validateFen(fen) {\n    // 1st criterion: 6 space-seperated fields?\n    const tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: must contain six space-delimited fields',\n        };\n    }\n    // 2nd criterion: move number field is a integer value > 0?\n    const moveNumber = parseInt(tokens[5], 10);\n    if (isNaN(moveNumber) || moveNumber <= 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: move number must be a positive integer',\n        };\n    }\n    // 3rd criterion: half move counter is an integer >= 0?\n    const halfMoves = parseInt(tokens[4], 10);\n    if (isNaN(halfMoves) || halfMoves < 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: half move counter number must be a non-negative integer',\n        };\n    }\n    // 4th criterion: 4th field is a valid e.p.-string?\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };\n    }\n    // 5th criterion: 3th field is a valid castle-string?\n    if (/[^kKqQ-]/.test(tokens[2])) {\n        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };\n    }\n    // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n    if (!/^(w|b)$/.test(tokens[1])) {\n        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };\n    }\n    // 7th criterion: 1st field contains 8 rows?\n    const rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n        return {\n            ok: false,\n            error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n        };\n    }\n    // 8th criterion: every row is valid?\n    for (let i = 0; i < rows.length; i++) {\n        // check for right sum of fields AND not two numbers in succession\n        let sumFields = 0;\n        let previousWasNumber = false;\n        for (let k = 0; k < rows[i].length; k++) {\n            if (isDigit(rows[i][k])) {\n                if (previousWasNumber) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (consecutive number)',\n                    };\n                }\n                sumFields += parseInt(rows[i][k], 10);\n                previousWasNumber = true;\n            }\n            else {\n                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (invalid piece)',\n                    };\n                }\n                sumFields += 1;\n                previousWasNumber = false;\n            }\n        }\n        if (sumFields !== 8) {\n            return {\n                ok: false,\n                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n            };\n        }\n    }\n    // 9th criterion: is en-passant square legal?\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };\n    }\n    // 10th criterion: does chess position contain exact two kings?\n    const kings = [\n        { color: 'white', regex: /K/g },\n        { color: 'black', regex: /k/g },\n    ];\n    for (const { color, regex } of kings) {\n        if (!regex.test(tokens[0])) {\n            return { ok: false, error: `Invalid FEN: missing ${color} king` };\n        }\n        if ((tokens[0].match(regex) || []).length > 1) {\n            return { ok: false, error: `Invalid FEN: too many ${color} kings` };\n        }\n    }\n    // 11th criterion: are any pawns on the first or eighth rows?\n    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: some pawns are on the edge rows',\n        };\n    }\n    return { ok: true };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n    const from = move.from;\n    const to = move.to;\n    const piece = move.piece;\n    let ambiguities = 0;\n    let sameRank = 0;\n    let sameFile = 0;\n    for (let i = 0, len = moves.length; i < len; i++) {\n        const ambigFrom = moves[i].from;\n        const ambigTo = moves[i].to;\n        const ambigPiece = moves[i].piece;\n        /*\n         * if a move of the same piece type ends on the same to square, we'll need\n         * to add a disambiguator to the algebraic notation\n         */\n        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n            ambiguities++;\n            if (rank(from) === rank(ambigFrom)) {\n                sameRank++;\n            }\n            if (file(from) === file(ambigFrom)) {\n                sameFile++;\n            }\n        }\n    }\n    if (ambiguities > 0) {\n        if (sameRank > 0 && sameFile > 0) {\n            /*\n             * if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            return algebraic(from);\n        }\n        else if (sameFile > 0) {\n            /*\n             * if the moving piece rests on the same file, use the rank symbol as the\n             * disambiguator\n             */\n            return algebraic(from).charAt(1);\n        }\n        else {\n            // else use the file symbol\n            return algebraic(from).charAt(0);\n        }\n    }\n    return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n    const r = rank(to);\n    if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n        for (let i = 0; i < PROMOTIONS.length; i++) {\n            const promotion = PROMOTIONS[i];\n            moves.push({\n                color,\n                from,\n                to,\n                piece,\n                captured,\n                promotion,\n                flags: flags | BITS.PROMOTION,\n            });\n        }\n    }\n    else {\n        moves.push({\n            color,\n            from,\n            to,\n            piece,\n            captured,\n            flags,\n        });\n    }\n}\nfunction inferPieceType(san) {\n    let pieceType = san.charAt(0);\n    if (pieceType >= 'a' && pieceType <= 'h') {\n        const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n        if (matches) {\n            return undefined;\n        }\n        return PAWN;\n    }\n    pieceType = pieceType.toLowerCase();\n    if (pieceType === 'o') {\n        return KING;\n    }\n    return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nclass Chess {\n    _board = new Array(128);\n    _turn = WHITE;\n    _header = {};\n    _kings = { w: EMPTY, b: EMPTY };\n    _epSquare = -1;\n    _halfMoves = 0;\n    _moveNumber = 0;\n    _history = [];\n    _comments = {};\n    _castling = { w: 0, b: 0 };\n    _hash = 0n;\n    // tracks number of times a position has been seen for repetition checking\n    _positionCount = new Map();\n    constructor(fen = DEFAULT_POSITION, { skipValidation = false } = {}) {\n        this.load(fen, { skipValidation });\n    }\n    clear({ preserveHeaders = false } = {}) {\n        this._board = new Array(128);\n        this._kings = { w: EMPTY, b: EMPTY };\n        this._turn = WHITE;\n        this._castling = { w: 0, b: 0 };\n        this._epSquare = EMPTY;\n        this._halfMoves = 0;\n        this._moveNumber = 1;\n        this._history = [];\n        this._comments = {};\n        this._header = preserveHeaders ? this._header : { ...HEADER_TEMPLATE };\n        this._hash = this._computeHash();\n        this._positionCount = new Map();\n        /*\n         * Delete the SetUp and FEN headers (if preserved), the board is empty and\n         * these headers don't make sense in this state. They'll get added later\n         * via .load() or .put()\n         */\n        this._header['SetUp'] = null;\n        this._header['FEN'] = null;\n    }\n    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {\n        let tokens = fen.split(/\\s+/);\n        // append commonly omitted fen tokens\n        if (tokens.length >= 2 && tokens.length < 6) {\n            const adjustments = ['-', '-', '0', '1'];\n            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n        }\n        tokens = fen.split(/\\s+/);\n        if (!skipValidation) {\n            const { ok, error } = validateFen(fen);\n            if (!ok) {\n                throw new Error(error);\n            }\n        }\n        const position = tokens[0];\n        let square = 0;\n        this.clear({ preserveHeaders });\n        for (let i = 0; i < position.length; i++) {\n            const piece = position.charAt(i);\n            if (piece === '/') {\n                square += 8;\n            }\n            else if (isDigit(piece)) {\n                square += parseInt(piece, 10);\n            }\n            else {\n                const color = piece < 'a' ? WHITE : BLACK;\n                this._put({ type: piece.toLowerCase(), color }, algebraic(square));\n                square++;\n            }\n        }\n        this._turn = tokens[1];\n        if (tokens[2].indexOf('K') > -1) {\n            this._castling.w |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this._castling.w |= BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this._castling.b |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this._castling.b |= BITS.QSIDE_CASTLE;\n        }\n        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n        this._halfMoves = parseInt(tokens[4], 10);\n        this._moveNumber = parseInt(tokens[5], 10);\n        this._hash = this._computeHash();\n        this._updateSetup(fen);\n        this._incPositionCount();\n    }\n    fen({ forceEnpassantSquare = false, } = {}) {\n        let empty = 0;\n        let fen = '';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i]) {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                const { color, type: piece } = this._board[i];\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n            }\n            else {\n                empty++;\n            }\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n                if (i !== Ox88.h1) {\n                    fen += '/';\n                }\n                empty = 0;\n                i += 8;\n            }\n        }\n        let castling = '';\n        if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n            castling += 'K';\n        }\n        if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n            castling += 'Q';\n        }\n        if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n            castling += 'k';\n        }\n        if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n            castling += 'q';\n        }\n        // do we have an empty castling flag?\n        castling = castling || '-';\n        let epSquare = '-';\n        /*\n         * only print the ep square if en passant is a valid move (pawn is present\n         * and ep capture is not pinned)\n         */\n        if (this._epSquare !== EMPTY) {\n            if (forceEnpassantSquare) {\n                epSquare = algebraic(this._epSquare);\n            }\n            else {\n                const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n                const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n                for (const square of squares) {\n                    // is the square off the board?\n                    if (square & 0x88) {\n                        continue;\n                    }\n                    const color = this._turn;\n                    // is there a pawn that can capture the epSquare?\n                    if (this._board[square]?.color === color &&\n                        this._board[square]?.type === PAWN) {\n                        // if the pawn makes an ep capture, does it leave its king in check?\n                        this._makeMove({\n                            color,\n                            from: square,\n                            to: this._epSquare,\n                            piece: PAWN,\n                            captured: PAWN,\n                            flags: BITS.EP_CAPTURE,\n                        });\n                        const isLegal = !this._isKingAttacked(color);\n                        this._undoMove();\n                        // if ep is legal, break and set the ep square in the FEN output\n                        if (isLegal) {\n                            epSquare = algebraic(this._epSquare);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return [\n            fen,\n            this._turn,\n            castling,\n            epSquare,\n            this._halfMoves,\n            this._moveNumber,\n        ].join(' ');\n    }\n    _pieceKey(i) {\n        if (!this._board[i]) {\n            return 0n;\n        }\n        const { color, type } = this._board[i];\n        const colorIndex = {\n            w: 0,\n            b: 1,\n        }[color];\n        const typeIndex = {\n            p: 0,\n            n: 1,\n            b: 2,\n            r: 3,\n            q: 4,\n            k: 5,\n        }[type];\n        return PIECE_KEYS[colorIndex][typeIndex][i];\n    }\n    _epKey() {\n        return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7];\n    }\n    _castlingKey() {\n        const index = (this._castling.w >> 5) | (this._castling.b >> 3);\n        return CASTLING_KEYS[index];\n    }\n    _computeHash() {\n        let hash = 0n;\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            if (this._board[i]) {\n                hash ^= this._pieceKey(i);\n            }\n        }\n        hash ^= this._epKey();\n        hash ^= this._castlingKey();\n        if (this._turn === 'b') {\n            hash ^= SIDE_KEY;\n        }\n        return hash;\n    }\n    /*\n     * Called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object. If the FEN\n     * is equal to the default position, the SetUp and FEN are deleted the setup\n     * is only updated if history.length is zero, ie moves haven't been made.\n     */\n    _updateSetup(fen) {\n        if (this._history.length > 0)\n            return;\n        if (fen !== DEFAULT_POSITION) {\n            this._header['SetUp'] = '1';\n            this._header['FEN'] = fen;\n        }\n        else {\n            this._header['SetUp'] = null;\n            this._header['FEN'] = null;\n        }\n    }\n    reset() {\n        this.load(DEFAULT_POSITION);\n    }\n    get(square) {\n        return this._board[Ox88[square]];\n    }\n    findPiece(piece) {\n        const squares = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            // if empty square or wrong color\n            if (!this._board[i] || this._board[i]?.color !== piece.color) {\n                continue;\n            }\n            // check if square contains the requested piece\n            if (this._board[i].color === piece.color &&\n                this._board[i].type === piece.type) {\n                squares.push(algebraic(i));\n            }\n        }\n        return squares;\n    }\n    put({ type, color }, square) {\n        if (this._put({ type, color }, square)) {\n            this._updateCastlingRights();\n            this._updateEnPassantSquare();\n            this._updateSetup(this.fen());\n            return true;\n        }\n        return false;\n    }\n    _set(sq, piece) {\n        this._hash ^= this._pieceKey(sq);\n        this._board[sq] = piece;\n        this._hash ^= this._pieceKey(sq);\n    }\n    _put({ type, color }, square) {\n        // check for piece\n        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n            return false;\n        }\n        // check for valid square\n        if (!(square in Ox88)) {\n            return false;\n        }\n        const sq = Ox88[square];\n        // don't let the user place more than one king\n        if (type == KING &&\n            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n            return false;\n        }\n        const currentPieceOnSquare = this._board[sq];\n        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n        if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n            this._kings[currentPieceOnSquare.color] = EMPTY;\n        }\n        this._set(sq, { type: type, color: color });\n        if (type === KING) {\n            this._kings[color] = sq;\n        }\n        return true;\n    }\n    _clear(sq) {\n        this._hash ^= this._pieceKey(sq);\n        delete this._board[sq];\n    }\n    remove(square) {\n        const piece = this.get(square);\n        this._clear(Ox88[square]);\n        if (piece && piece.type === KING) {\n            this._kings[piece.color] = EMPTY;\n        }\n        this._updateCastlingRights();\n        this._updateEnPassantSquare();\n        this._updateSetup(this.fen());\n        return piece;\n    }\n    _updateCastlingRights() {\n        this._hash ^= this._castlingKey();\n        const whiteKingInPlace = this._board[Ox88.e1]?.type === KING &&\n            this._board[Ox88.e1]?.color === WHITE;\n        const blackKingInPlace = this._board[Ox88.e8]?.type === KING &&\n            this._board[Ox88.e8]?.color === BLACK;\n        if (!whiteKingInPlace ||\n            this._board[Ox88.a1]?.type !== ROOK ||\n            this._board[Ox88.a1]?.color !== WHITE) {\n            this._castling.w &= -65;\n        }\n        if (!whiteKingInPlace ||\n            this._board[Ox88.h1]?.type !== ROOK ||\n            this._board[Ox88.h1]?.color !== WHITE) {\n            this._castling.w &= -33;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.a8]?.type !== ROOK ||\n            this._board[Ox88.a8]?.color !== BLACK) {\n            this._castling.b &= -65;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.h8]?.type !== ROOK ||\n            this._board[Ox88.h8]?.color !== BLACK) {\n            this._castling.b &= -33;\n        }\n        this._hash ^= this._castlingKey();\n    }\n    _updateEnPassantSquare() {\n        if (this._epSquare === EMPTY) {\n            return;\n        }\n        const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n        const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const attackers = [currentSquare + 1, currentSquare - 1];\n        if (this._board[startSquare] !== null ||\n            this._board[this._epSquare] !== null ||\n            this._board[currentSquare]?.color !== swapColor(this._turn) ||\n            this._board[currentSquare]?.type !== PAWN) {\n            this._hash ^= this._epKey();\n            this._epSquare = EMPTY;\n            return;\n        }\n        const canCapture = (square) => !(square & 0x88) &&\n            this._board[square]?.color === this._turn &&\n            this._board[square]?.type === PAWN;\n        if (!attackers.some(canCapture)) {\n            this._hash ^= this._epKey();\n            this._epSquare = EMPTY;\n        }\n    }\n    _attacked(color, square, verbose) {\n        const attackers = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            // if empty square or wrong color\n            if (this._board[i] === undefined || this._board[i].color !== color) {\n                continue;\n            }\n            const piece = this._board[i];\n            const difference = i - square;\n            // skip - to/from square are the same\n            if (difference === 0) {\n                continue;\n            }\n            const index = difference + 119;\n            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n                if (piece.type === PAWN) {\n                    if ((difference > 0 && piece.color === WHITE) ||\n                        (difference <= 0 && piece.color === BLACK)) {\n                        if (!verbose) {\n                            return true;\n                        }\n                        else {\n                            attackers.push(algebraic(i));\n                        }\n                    }\n                    continue;\n                }\n                // if the piece is a knight or a king\n                if (piece.type === 'n' || piece.type === 'k') {\n                    if (!verbose) {\n                        return true;\n                    }\n                    else {\n                        attackers.push(algebraic(i));\n                        continue;\n                    }\n                }\n                const offset = RAYS[index];\n                let j = i + offset;\n                let blocked = false;\n                while (j !== square) {\n                    if (this._board[j] != null) {\n                        blocked = true;\n                        break;\n                    }\n                    j += offset;\n                }\n                if (!blocked) {\n                    if (!verbose) {\n                        return true;\n                    }\n                    else {\n                        attackers.push(algebraic(i));\n                        continue;\n                    }\n                }\n            }\n        }\n        if (verbose) {\n            return attackers;\n        }\n        else {\n            return false;\n        }\n    }\n    attackers(square, attackedBy) {\n        if (!attackedBy) {\n            return this._attacked(this._turn, Ox88[square], true);\n        }\n        else {\n            return this._attacked(attackedBy, Ox88[square], true);\n        }\n    }\n    _isKingAttacked(color) {\n        const square = this._kings[color];\n        return square === -1 ? false : this._attacked(swapColor(color), square);\n    }\n    hash() {\n        return this._hash.toString(16);\n    }\n    isAttacked(square, attackedBy) {\n        return this._attacked(attackedBy, Ox88[square]);\n    }\n    isCheck() {\n        return this._isKingAttacked(this._turn);\n    }\n    inCheck() {\n        return this.isCheck();\n    }\n    isCheckmate() {\n        return this.isCheck() && this._moves().length === 0;\n    }\n    isStalemate() {\n        return !this.isCheck() && this._moves().length === 0;\n    }\n    isInsufficientMaterial() {\n        /*\n         * k.b. vs k.b. (of opposite colors) with mate in 1:\n         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n         *\n         * k.b. vs k.n. with mate in 1:\n         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n         */\n        const pieces = {\n            b: 0,\n            n: 0,\n            r: 0,\n            q: 0,\n            k: 0,\n            p: 0,\n        };\n        const bishops = [];\n        let numPieces = 0;\n        let squareColor = 0;\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            squareColor = (squareColor + 1) % 2;\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            const piece = this._board[i];\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n                if (piece.type === BISHOP) {\n                    bishops.push(squareColor);\n                }\n                numPieces++;\n            }\n        }\n        // k vs. k\n        if (numPieces === 2) {\n            return true;\n        }\n        else if (\n        // k vs. kn .... or .... k vs. kb\n        numPieces === 3 &&\n            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n            return true;\n        }\n        else if (numPieces === pieces[BISHOP] + 2) {\n            // kb vs. kb where any number of bishops are all on the same color\n            let sum = 0;\n            const len = bishops.length;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isThreefoldRepetition() {\n        return this._getPositionCount(this._hash) >= 3;\n    }\n    isDrawByFiftyMoves() {\n        return this._halfMoves >= 100; // 50 moves per side = 100 half moves\n    }\n    isDraw() {\n        return (this.isDrawByFiftyMoves() ||\n            this.isStalemate() ||\n            this.isInsufficientMaterial() ||\n            this.isThreefoldRepetition());\n    }\n    isGameOver() {\n        return this.isCheckmate() || this.isDraw();\n    }\n    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {\n        const moves = this._moves({ square, piece });\n        if (verbose) {\n            return moves.map((move) => new Move(this, move));\n        }\n        else {\n            return moves.map((move) => this._moveToSan(move, moves));\n        }\n    }\n    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {\n        const forSquare = square ? square.toLowerCase() : undefined;\n        const forPiece = piece?.toLowerCase();\n        const moves = [];\n        const us = this._turn;\n        const them = swapColor(us);\n        let firstSquare = Ox88.a8;\n        let lastSquare = Ox88.h1;\n        let singleSquare = false;\n        // are we generating moves for a single square?\n        if (forSquare) {\n            // illegal square, return empty moves\n            if (!(forSquare in Ox88)) {\n                return [];\n            }\n            else {\n                firstSquare = lastSquare = Ox88[forSquare];\n                singleSquare = true;\n            }\n        }\n        for (let from = firstSquare; from <= lastSquare; from++) {\n            // did we run off the end of the board\n            if (from & 0x88) {\n                from += 7;\n                continue;\n            }\n            // empty square or opponent, skip\n            if (!this._board[from] || this._board[from].color === them) {\n                continue;\n            }\n            const { type } = this._board[from];\n            let to;\n            if (type === PAWN) {\n                if (forPiece && forPiece !== type)\n                    continue;\n                // single square, non-capturing\n                to = from + PAWN_OFFSETS[us][0];\n                if (!this._board[to]) {\n                    addMove(moves, us, from, to, PAWN);\n                    // double square\n                    to = from + PAWN_OFFSETS[us][1];\n                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n                        addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n                    }\n                }\n                // pawn captures\n                for (let j = 2; j < 4; j++) {\n                    to = from + PAWN_OFFSETS[us][j];\n                    if (to & 0x88)\n                        continue;\n                    if (this._board[to]?.color === them) {\n                        addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n                    }\n                    else if (to === this._epSquare) {\n                        addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n                    }\n                }\n            }\n            else {\n                if (forPiece && forPiece !== type)\n                    continue;\n                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n                    const offset = PIECE_OFFSETS[type][j];\n                    to = from;\n                    while (true) {\n                        to += offset;\n                        if (to & 0x88)\n                            break;\n                        if (!this._board[to]) {\n                            addMove(moves, us, from, to, type);\n                        }\n                        else {\n                            // own color, stop loop\n                            if (this._board[to].color === us)\n                                break;\n                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n                            break;\n                        }\n                        /* break, if knight or king */\n                        if (type === KNIGHT || type === KING)\n                            break;\n                    }\n                }\n            }\n        }\n        /*\n         * check for castling if we're:\n         *   a) generating all moves, or\n         *   b) doing single square move generation on the king's square\n         */\n        if (forPiece === undefined || forPiece === KING) {\n            if (!singleSquare || lastSquare === this._kings[us]) {\n                // king-side castling\n                if (this._castling[us] & BITS.KSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom + 2;\n                    if (!this._board[castlingFrom + 1] &&\n                        !this._board[castlingTo] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom + 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n                    }\n                }\n                // queen-side castling\n                if (this._castling[us] & BITS.QSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom - 2;\n                    if (!this._board[castlingFrom - 1] &&\n                        !this._board[castlingFrom - 2] &&\n                        !this._board[castlingFrom - 3] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom - 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n                    }\n                }\n            }\n        }\n        /*\n         * return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal || this._kings[us] === -1) {\n            return moves;\n        }\n        // filter out illegal moves\n        const legalMoves = [];\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(us)) {\n                legalMoves.push(moves[i]);\n            }\n            this._undoMove();\n        }\n        return legalMoves;\n    }\n    move(move, { strict = false } = {}) {\n        /*\n         * The move function can be called with in the following parameters:\n         *\n         * .move('Nxb7')       <- argument is a case-sensitive SAN string\n         *\n         * .move({ from: 'h7', <- argument is a move object\n         *         to :'h8',\n         *         promotion: 'q' })\n         *\n         *\n         * An optional strict argument may be supplied to tell chess.js to\n         * strictly follow the SAN specification.\n         */\n        let moveObj = null;\n        if (typeof move === 'string') {\n            moveObj = this._moveFromSan(move, strict);\n        }\n        else if (move === null) {\n            moveObj = this._moveFromSan(SAN_NULLMOVE, strict);\n        }\n        else if (typeof move === 'object') {\n            const moves = this._moves();\n            // convert the pretty move object to an ugly move object\n            for (let i = 0, len = moves.length; i < len; i++) {\n                if (move.from === algebraic(moves[i].from) &&\n                    move.to === algebraic(moves[i].to) &&\n                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n                    moveObj = moves[i];\n                    break;\n                }\n            }\n        }\n        // failed to find move\n        if (!moveObj) {\n            if (typeof move === 'string') {\n                throw new Error(`Invalid move: ${move}`);\n            }\n            else {\n                throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n            }\n        }\n        //disallow null moves when in check\n        if (this.isCheck() && moveObj.flags & BITS.NULL_MOVE) {\n            throw new Error('Null move not allowed when in check');\n        }\n        /*\n         * need to make a copy of move because we can't generate SAN after the move\n         * is made\n         */\n        const prettyMove = new Move(this, moveObj);\n        this._makeMove(moveObj);\n        this._incPositionCount();\n        return prettyMove;\n    }\n    _push(move) {\n        this._history.push({\n            move,\n            kings: { b: this._kings.b, w: this._kings.w },\n            turn: this._turn,\n            castling: { b: this._castling.b, w: this._castling.w },\n            epSquare: this._epSquare,\n            halfMoves: this._halfMoves,\n            moveNumber: this._moveNumber,\n        });\n    }\n    _movePiece(from, to) {\n        this._hash ^= this._pieceKey(from);\n        this._board[to] = this._board[from];\n        delete this._board[from];\n        this._hash ^= this._pieceKey(to);\n    }\n    _makeMove(move) {\n        const us = this._turn;\n        const them = swapColor(us);\n        this._push(move);\n        if (move.flags & BITS.NULL_MOVE) {\n            if (us === BLACK) {\n                this._moveNumber++;\n            }\n            this._halfMoves++;\n            this._turn = them;\n            this._epSquare = EMPTY;\n            return;\n        }\n        this._hash ^= this._epKey();\n        this._hash ^= this._castlingKey();\n        if (move.captured) {\n            this._hash ^= this._pieceKey(move.to);\n        }\n        this._movePiece(move.from, move.to);\n        // if ep capture, remove the captured pawn\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (this._turn === BLACK) {\n                this._clear(move.to - 16);\n            }\n            else {\n                this._clear(move.to + 16);\n            }\n        }\n        // if pawn promotion, replace with new piece\n        if (move.promotion) {\n            this._clear(move.to);\n            this._set(move.to, { type: move.promotion, color: us });\n        }\n        // if we moved the king\n        if (this._board[move.to].type === KING) {\n            this._kings[us] = move.to;\n            // if we castled, move the rook next to the king\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                const castlingTo = move.to - 1;\n                const castlingFrom = move.to + 1;\n                this._movePiece(castlingFrom, castlingTo);\n            }\n            else if (move.flags & BITS.QSIDE_CASTLE) {\n                const castlingTo = move.to + 1;\n                const castlingFrom = move.to - 2;\n                this._movePiece(castlingFrom, castlingTo);\n            }\n            // turn off castling\n            this._castling[us] = 0;\n        }\n        // turn off castling if we move a rook\n        if (this._castling[us]) {\n            for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (move.from === ROOKS[us][i].square &&\n                    this._castling[us] & ROOKS[us][i].flag) {\n                    this._castling[us] ^= ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n        // turn off castling if we capture a rook\n        if (this._castling[them]) {\n            for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (move.to === ROOKS[them][i].square &&\n                    this._castling[them] & ROOKS[them][i].flag) {\n                    this._castling[them] ^= ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n        this._hash ^= this._castlingKey();\n        // if big pawn move, update the en passant square\n        if (move.flags & BITS.BIG_PAWN) {\n            let epSquare;\n            if (us === BLACK) {\n                epSquare = move.to - 16;\n            }\n            else {\n                epSquare = move.to + 16;\n            }\n            if ((!((move.to - 1) & 0x88) &&\n                this._board[move.to - 1]?.type === PAWN &&\n                this._board[move.to - 1]?.color === them) ||\n                (!((move.to + 1) & 0x88) &&\n                    this._board[move.to + 1]?.type === PAWN &&\n                    this._board[move.to + 1]?.color === them)) {\n                this._epSquare = epSquare;\n                this._hash ^= this._epKey();\n            }\n            else {\n                this._epSquare = EMPTY;\n            }\n        }\n        else {\n            this._epSquare = EMPTY;\n        }\n        // reset the 50 move counter if a pawn is moved or a piece is captured\n        if (move.piece === PAWN) {\n            this._halfMoves = 0;\n        }\n        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            this._halfMoves = 0;\n        }\n        else {\n            this._halfMoves++;\n        }\n        if (us === BLACK) {\n            this._moveNumber++;\n        }\n        this._turn = them;\n        this._hash ^= SIDE_KEY;\n    }\n    undo() {\n        const hash = this._hash;\n        const move = this._undoMove();\n        if (move) {\n            const prettyMove = new Move(this, move);\n            this._decPositionCount(hash);\n            return prettyMove;\n        }\n        return null;\n    }\n    _undoMove() {\n        const old = this._history.pop();\n        if (old === undefined) {\n            return null;\n        }\n        this._hash ^= this._epKey();\n        this._hash ^= this._castlingKey();\n        const move = old.move;\n        this._kings = old.kings;\n        this._turn = old.turn;\n        this._castling = old.castling;\n        this._epSquare = old.epSquare;\n        this._halfMoves = old.halfMoves;\n        this._moveNumber = old.moveNumber;\n        this._hash ^= this._epKey();\n        this._hash ^= this._castlingKey();\n        this._hash ^= SIDE_KEY;\n        const us = this._turn;\n        const them = swapColor(us);\n        if (move.flags & BITS.NULL_MOVE) {\n            return move;\n        }\n        this._movePiece(move.to, move.from);\n        // to undo any promotions\n        if (move.piece) {\n            this._clear(move.from);\n            this._set(move.from, { type: move.piece, color: us });\n        }\n        if (move.captured) {\n            if (move.flags & BITS.EP_CAPTURE) {\n                // en passant capture\n                let index;\n                if (us === BLACK) {\n                    index = move.to - 16;\n                }\n                else {\n                    index = move.to + 16;\n                }\n                this._set(index, { type: PAWN, color: them });\n            }\n            else {\n                // regular capture\n                this._set(move.to, { type: move.captured, color: them });\n            }\n        }\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            let castlingTo, castlingFrom;\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castlingTo = move.to + 1;\n                castlingFrom = move.to - 1;\n            }\n            else {\n                castlingTo = move.to - 2;\n                castlingFrom = move.to + 1;\n            }\n            this._movePiece(castlingFrom, castlingTo);\n        }\n        return move;\n    }\n    pgn({ newline = '\\n', maxWidth = 0, } = {}) {\n        /*\n         * using the specification from http://www.chessclub.com/help/PGN-spec\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n         */\n        const result = [];\n        let headerExists = false;\n        /* add the PGN header information */\n        for (const i in this._header) {\n            /*\n             * TODO: order of enumerated properties in header object is not\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\n             *\n             * By using HEADER_TEMPLATE, the order of tags should be preserved; we\n             * do have to check for null placeholders, though, and omit them\n             */\n            const headerTag = this._header[i];\n            if (headerTag)\n                result.push(`[${i} \"${this._header[i]}\"]` + newline);\n            headerExists = true;\n        }\n        if (headerExists && this._history.length) {\n            result.push(newline);\n        }\n        const appendComment = (moveString) => {\n            const comment = this._comments[this.fen()];\n            if (typeof comment !== 'undefined') {\n                const delimiter = moveString.length > 0 ? ' ' : '';\n                moveString = `${moveString}${delimiter}{${comment}}`;\n            }\n            return moveString;\n        };\n        // pop all of history onto reversed_history\n        const reversedHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        const moves = [];\n        let moveString = '';\n        // special case of a commented starting position with no moves\n        if (reversedHistory.length === 0) {\n            moves.push(appendComment(''));\n        }\n        // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n        while (reversedHistory.length > 0) {\n            moveString = appendComment(moveString);\n            const move = reversedHistory.pop();\n            // make TypeScript stop complaining about move being undefined\n            if (!move) {\n                break;\n            }\n            // if the position started with black to move, start PGN with #. ...\n            if (!this._history.length && move.color === 'b') {\n                const prefix = `${this._moveNumber}. ...`;\n                // is there a comment preceding the first move?\n                moveString = moveString ? `${moveString} ${prefix}` : prefix;\n            }\n            else if (move.color === 'w') {\n                // store the previous generated move_string if we have one\n                if (moveString.length) {\n                    moves.push(moveString);\n                }\n                moveString = this._moveNumber + '.';\n            }\n            moveString =\n                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));\n            this._makeMove(move);\n        }\n        // are there any other leftover moves?\n        if (moveString.length) {\n            moves.push(appendComment(moveString));\n        }\n        // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)\n        moves.push(this._header.Result || '*');\n        /*\n         * history should be back to what it was before we started generating PGN,\n         * so join together moves\n         */\n        if (maxWidth === 0) {\n            return result.join('') + moves.join(' ');\n        }\n        // TODO (jah): huh?\n        const strip = function () {\n            if (result.length > 0 && result[result.length - 1] === ' ') {\n                result.pop();\n                return true;\n            }\n            return false;\n        };\n        // NB: this does not preserve comment whitespace.\n        const wrapComment = function (width, move) {\n            for (const token of move.split(' ')) {\n                if (!token) {\n                    continue;\n                }\n                if (width + token.length > maxWidth) {\n                    while (strip()) {\n                        width--;\n                    }\n                    result.push(newline);\n                    width = 0;\n                }\n                result.push(token);\n                width += token.length;\n                result.push(' ');\n                width++;\n            }\n            if (strip()) {\n                width--;\n            }\n            return width;\n        };\n        // wrap the PGN output at max_width\n        let currentWidth = 0;\n        for (let i = 0; i < moves.length; i++) {\n            if (currentWidth + moves[i].length > maxWidth) {\n                if (moves[i].includes('{')) {\n                    currentWidth = wrapComment(currentWidth, moves[i]);\n                    continue;\n                }\n            }\n            // if the current move will push past max_width\n            if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n                // don't end the line with whitespace\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n                result.push(newline);\n                currentWidth = 0;\n            }\n            else if (i !== 0) {\n                result.push(' ');\n                currentWidth++;\n            }\n            result.push(moves[i]);\n            currentWidth += moves[i].length;\n        }\n        return result.join('');\n    }\n    /**\n     * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)\n     */\n    header(...args) {\n        for (let i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                this._header[args[i]] = args[i + 1];\n            }\n        }\n        return this._header;\n    }\n    // TODO: value validation per spec\n    setHeader(key, value) {\n        this._header[key] = value ?? SEVEN_TAG_ROSTER[key] ?? null;\n        return this.getHeaders();\n    }\n    removeHeader(key) {\n        if (key in this._header) {\n            this._header[key] = SEVEN_TAG_ROSTER[key] || null;\n            return true;\n        }\n        return false;\n    }\n    // return only non-null headers (omit placemarker nulls)\n    getHeaders() {\n        const nonNullHeaders = {};\n        for (const [key, value] of Object.entries(this._header)) {\n            if (value !== null) {\n                nonNullHeaders[key] = value;\n            }\n        }\n        return nonNullHeaders;\n    }\n    loadPgn(pgn, { strict = false, newlineChar = '\\r?\\n', } = {}) {\n        // If newlineChar is not the default, replace all instances with \\n\n        if (newlineChar !== '\\r?\\n') {\n            pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\\n');\n        }\n        const parsedPgn = peg$parse(pgn);\n        // Put the board in the starting position\n        this.reset();\n        // parse PGN header\n        const headers = parsedPgn.headers;\n        let fen = '';\n        for (const key in headers) {\n            // check to see user is including fen (possibly with wrong tag case)\n            if (key.toLowerCase() === 'fen') {\n                fen = headers[key];\n            }\n            this.header(key, headers[key]);\n        }\n        /*\n         * the permissive parser should attempt to load a fen tag, even if it's the\n         * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n         */\n        if (!strict) {\n            if (fen) {\n                this.load(fen, { preserveHeaders: true });\n            }\n        }\n        else {\n            /*\n             * strict parser - load the starting position indicated by [Setup '1']\n             * and [FEN position]\n             */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers)) {\n                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n                }\n                // don't clear the headers when loading\n                this.load(headers['FEN'], { preserveHeaders: true });\n            }\n        }\n        let node = parsedPgn.root;\n        while (node) {\n            if (node.move) {\n                const move = this._moveFromSan(node.move, strict);\n                if (move == null) {\n                    throw new Error(`Invalid move in PGN: ${node.move}`);\n                }\n                else {\n                    this._makeMove(move);\n                    this._incPositionCount();\n                }\n            }\n            if (node.comment !== undefined) {\n                this._comments[this.fen()] = node.comment;\n            }\n            node = node.variations[0];\n        }\n        /*\n         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n         * the termination marker. Only do this when headers are present, but the\n         * result tag is missing\n         */\n        const result = parsedPgn.result;\n        if (result &&\n            Object.keys(this._header).length &&\n            this._header['Result'] !== result) {\n            this.setHeader('Result', result);\n        }\n    }\n    /*\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\n     * on overly disambiguated moves (see below):\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    _moveToSan(move, moves) {\n        let output = '';\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        }\n        else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        }\n        else if (move.flags & BITS.NULL_MOVE) {\n            return SAN_NULLMOVE;\n        }\n        else {\n            if (move.piece !== PAWN) {\n                const disambiguator = getDisambiguator(move, moves);\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n            output += algebraic(move.to);\n            if (move.promotion) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n        this._makeMove(move);\n        if (this.isCheck()) {\n            if (this.isCheckmate()) {\n                output += '#';\n            }\n            else {\n                output += '+';\n            }\n        }\n        this._undoMove();\n        return output;\n    }\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    _moveFromSan(move, strict = false) {\n        // strip off any move decorations: e.g Nf3+?! becomes Nf3\n        let cleanMove = strippedSan(move);\n        if (!strict) {\n            if (cleanMove === '0-0') {\n                cleanMove = 'O-O';\n            }\n            else if (cleanMove === '0-0-0') {\n                cleanMove = 'O-O-O';\n            }\n        }\n        //first implementation of null with a dummy move (black king moves from a8 to a8), maybe this can be implemented better\n        if (cleanMove == SAN_NULLMOVE) {\n            const res = {\n                color: this._turn,\n                from: 0,\n                to: 0,\n                piece: 'k',\n                flags: BITS.NULL_MOVE,\n            };\n            return res;\n        }\n        let pieceType = inferPieceType(cleanMove);\n        let moves = this._moves({ legal: true, piece: pieceType });\n        // strict parser\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n                return moves[i];\n            }\n        }\n        // the strict parser failed\n        if (strict) {\n            return null;\n        }\n        let piece = undefined;\n        let matches = undefined;\n        let from = undefined;\n        let to = undefined;\n        let promotion = undefined;\n        /*\n         * The default permissive (non-strict) parser allows the user to parse\n         * non-standard chess notations. This parser is only run after the strict\n         * Standard Algebraic Notation (SAN) parser has failed.\n         *\n         * When running the permissive parser, we'll run a regex to grab the piece, the\n         * to/from square, and an optional promotion piece. This regex will\n         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n         * f7f8q, b1c3\n         *\n         * NOTE: Some positions and moves may be ambiguous when using the permissive\n         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n         * move). In these cases, the permissive parser will default to the most\n         * basic interpretation (which is b1c3 parsing to Nc3).\n         */\n        let overlyDisambiguated = false;\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n            piece = matches[1];\n            from = matches[2];\n            to = matches[3];\n            promotion = matches[4];\n            if (from.length == 1) {\n                overlyDisambiguated = true;\n            }\n        }\n        else {\n            /*\n             * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n             * there is one legal knight move to e7). In this case, the value of\n             * 'from' variable will be a rank or file, not a square.\n             */\n            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n            if (matches) {\n                piece = matches[1];\n                from = matches[2];\n                to = matches[3];\n                promotion = matches[4];\n                if (from.length == 1) {\n                    overlyDisambiguated = true;\n                }\n            }\n        }\n        pieceType = inferPieceType(cleanMove);\n        moves = this._moves({\n            legal: true,\n            piece: piece ? piece : pieceType,\n        });\n        if (!to) {\n            return null;\n        }\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (!from) {\n                // if there is no from square, it could be just 'x' missing from a capture\n                if (cleanMove ===\n                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n                    return moves[i];\n                }\n                // hand-compare move properties with the results from our permissive regex\n            }\n            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                Ox88[from] == moves[i].from &&\n                Ox88[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                return moves[i];\n            }\n            else if (overlyDisambiguated) {\n                /*\n                 * SPECIAL CASE: we parsed a move string that may have an unneeded\n                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n                 */\n                const square = algebraic(moves[i].from);\n                if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                    Ox88[to] == moves[i].to &&\n                    (from == square[0] || from == square[1]) &&\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n        return null;\n    }\n    ascii() {\n        let s = '   +------------------------+\\n';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // display the rank\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |';\n            }\n            if (this._board[i]) {\n                const piece = this._board[i].type;\n                const color = this._board[i].color;\n                const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n            else {\n                s += ' . ';\n            }\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h';\n        return s;\n    }\n    perft(depth) {\n        const moves = this._moves({ legal: false });\n        let nodes = 0;\n        const color = this._turn;\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(color)) {\n                if (depth - 1 > 0) {\n                    nodes += this.perft(depth - 1);\n                }\n                else {\n                    nodes++;\n                }\n            }\n            this._undoMove();\n        }\n        return nodes;\n    }\n    setTurn(color) {\n        if (this._turn == color) {\n            return false;\n        }\n        this.move('--');\n        return true;\n    }\n    turn() {\n        return this._turn;\n    }\n    board() {\n        const output = [];\n        let row = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i] == null) {\n                row.push(null);\n            }\n            else {\n                row.push({\n                    square: algebraic(i),\n                    type: this._board[i].type,\n                    color: this._board[i].color,\n                });\n            }\n            if ((i + 1) & 0x88) {\n                output.push(row);\n                row = [];\n                i += 8;\n            }\n        }\n        return output;\n    }\n    squareColor(square) {\n        if (square in Ox88) {\n            const sq = Ox88[square];\n            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n        }\n        return null;\n    }\n    history({ verbose = false } = {}) {\n        const reversedHistory = [];\n        const moveHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            if (verbose) {\n                moveHistory.push(new Move(this, move));\n            }\n            else {\n                moveHistory.push(this._moveToSan(move, this._moves()));\n            }\n            this._makeMove(move);\n        }\n        return moveHistory;\n    }\n    /*\n     * Keeps track of position occurrence counts for the purpose of repetition\n     * checking. Old positions are removed from the map if their counts are reduced to 0.\n     */\n    _getPositionCount(hash) {\n        return this._positionCount.get(hash) ?? 0;\n    }\n    _incPositionCount() {\n        this._positionCount.set(this._hash, (this._positionCount.get(this._hash) ?? 0) + 1);\n    }\n    _decPositionCount(hash) {\n        const currentCount = this._positionCount.get(hash) ?? 0;\n        if (currentCount === 1) {\n            this._positionCount.delete(hash);\n        }\n        else {\n            this._positionCount.set(hash, currentCount - 1);\n        }\n    }\n    _pruneComments() {\n        const reversedHistory = [];\n        const currentComments = {};\n        const copyComment = (fen) => {\n            if (fen in this._comments) {\n                currentComments[fen] = this._comments[fen];\n            }\n        };\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        copyComment(this.fen());\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            this._makeMove(move);\n            copyComment(this.fen());\n        }\n        this._comments = currentComments;\n    }\n    getComment() {\n        return this._comments[this.fen()];\n    }\n    setComment(comment) {\n        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n    }\n    /**\n     * @deprecated Renamed to `removeComment` for consistency\n     */\n    deleteComment() {\n        return this.removeComment();\n    }\n    removeComment() {\n        const comment = this._comments[this.fen()];\n        delete this._comments[this.fen()];\n        return comment;\n    }\n    getComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            return { fen: fen, comment: this._comments[fen] };\n        });\n    }\n    /**\n     * @deprecated Renamed to `removeComments` for consistency\n     */\n    deleteComments() {\n        return this.removeComments();\n    }\n    removeComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            const comment = this._comments[fen];\n            delete this._comments[fen];\n            return { fen: fen, comment: comment };\n        });\n    }\n    setCastlingRights(color, rights) {\n        for (const side of [KING, QUEEN]) {\n            if (rights[side] !== undefined) {\n                if (rights[side]) {\n                    this._castling[color] |= SIDES[side];\n                }\n                else {\n                    this._castling[color] &= ~SIDES[side];\n                }\n            }\n        }\n        this._updateCastlingRights();\n        const result = this.getCastlingRights(color);\n        return ((rights[KING] === undefined || rights[KING] === result[KING]) &&\n            (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]));\n    }\n    getCastlingRights(color) {\n        return {\n            [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n            [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n        };\n    }\n    moveNumber() {\n        return this._moveNumber;\n    }\n}\n\nexport { BISHOP, BLACK, Chess, DEFAULT_POSITION, KING, KNIGHT, Move, PAWN, QUEEN, ROOK, SEVEN_TAG_ROSTER, SQUARES, WHITE, validateFen, xoroshiro128 };\n//# sourceMappingURL=chess.js.map\n"],"names":["peg$SyntaxError","message","expected","found","location","self","Error","call","this","Object","setPrototypeOf","prototype","name","peg$padEnd","str","targetLength","padString","length","repeat","slice","peg$parse","input","options","peg$result","peg$FAILED","peg$source","undefined","grammarSource","peg$startRuleFunctions","pgn","peg$parsepgn","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$r0","peg$r1","peg$r2","peg$r3","peg$r4","peg$r5","peg$r6","peg$r7","peg$r8","peg$r9","peg$e0","peg$otherExpectation","peg$e1","peg$literalExpectation","peg$e2","peg$e3","peg$e4","peg$e5","peg$classExpectation","peg$e6","peg$e7","peg$e8","peg$e9","peg$e10","peg$e11","peg$e12","peg$e13","peg$e14","peg$e15","peg$e16","peg$e17","peg$e18","peg$e19","peg$e20","peg$e21","peg$e22","peg$e23","peg$e24","peg$e25","peg$e26","peg$e27","peg$e28","peg$e29","peg$e30","peg$e31","peg$e32","peg$e33","peg$e34","peg$e35","peg$e36","peg$e37","peg$e38","peg$e39","peg$f0","headers","game","marker","comment","node","root","next","variations","result","peg$f1","tagPairs","fromEntries","peg$f2","tagName","tagValue","peg$f3","peg$f4","moves","nodes","rest","parent","child","lineToTree","rootNode","flat","peg$f5","san","suffix","nag","move","peg$f6","peg$f7","replace","peg$f8","trim","peg$f9","line","peg$f10","peg$currPos","peg$posDetailsCache","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text","ignoreCase","type","parts","inverted","description","peg$computePosDetails","pos","p","details","charCodeAt","peg$computeLocation","startPos","endPos","offset","startPosDetails","endPosDetails","source","start","end","peg$fail","push","s1","s2","s0","peg$parsetagPair","peg$parse_","peg$parsetagPairSection","s3","peg$parseline","substr","peg$parsecomment","peg$parsegameTerminationMarker","peg$parsemoveTextSection","s4","s6","s7","s8","s10","charAt","test","substring","peg$parsetagName","peg$parsetagValue","peg$parsemove","s5","s9","peg$parsemoveNumber","peg$parsesan","peg$parsesuffixAnnotation","peg$parsenag","peg$parsevariation","peg$parsebraceComment","peg$parserestOfLineComment","peg$library","buildMessage","C","constructor","peg$subclass","format","sources","k","src","split","s","offset_s","loc","e","filler","toString","hatLen","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","map","part","Array","isArray","classEscape","join","any","other","hex","ch","toUpperCase","describeExpectation","i","j","descriptions","sort","describeExpected","describeFound","MASK64","rotl","x","wrappingMul","y","rand","state","BigInt","PIECE_KEYS","from","EP_KEYS","CASTLING_KEYS","SIDE_KEY","WHITE","BLACK","PAWN","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","Move","color","to","piece","captured","promotion","flags","lan","before","after","chess","internal","fromAlgebraic","algebraic","toAlgebraic","legal","fen","flag","BITS","FLAGS","isCapture","indexOf","isPromotion","isEnPassant","isKingsideCastle","isQueensideCastle","isBigPawn","EMPTY","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","NULL_MOVE","SEVEN_TAG_ROSTER","Event","Site","Date","Round","White","Black","Result","HEADER_TEMPLATE","WhiteTitle","BlackTitle","WhiteElo","BlackElo","WhiteUSCF","BlackUSCF","WhiteNA","BlackNA","WhiteType","BlackType","EventDate","EventSponsor","Section","Stage","Board","Opening","Variation","SubVariation","ECO","NIC","Time","UTCTime","UTCDate","TimeControl","SetUp","FEN","Termination","Annotator","Mode","PlyCount","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","ATTACKS","RAYS","PIECE_MASKS","PROMOTIONS","SIDES","ROOKS","square","SECOND_RANK","SAN_NULLMOVE","rank","file","isDigit","c","f","swapColor","addMove","inferPieceType","pieceType","match","toLowerCase","strippedSan","_board","_turn","_header","_kings","_epSquare","_halfMoves","_moveNumber","_history","_comments","_castling","_hash","_positionCount","Map","skipValidation","load","clear","preserveHeaders","_computeHash","tokens","adjustments","concat","ok","error","moveNumber","parseInt","isNaN","halfMoves","rows","sumFields","previousWasNumber","kings","regex","some","char","validateFen","position","_put","_updateSetup","_incPositionCount","forceEnpassantSquare","empty","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","_pieceKey","typeIndex","_epKey","_castlingKey","index","hash","reset","get","findPiece","put","_updateCastlingRights","_updateEnPassantSquare","_set","sq","currentPieceOnSquare","_clear","remove","whiteKingInPlace","blackKingInPlace","startSquare","currentSquare","attackers","_attacked","verbose","difference","blocked","attackedBy","isAttacked","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","len","isThreefoldRepetition","_getPositionCount","isDrawByFiftyMoves","isDraw","isGameOver","_moveToSan","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","_push","turn","_movePiece","undo","_decPositionCount","old","pop","newline","maxWidth","headerExists","appendComment","moveString","reversedHistory","prefix","strip","wrapComment","width","token","currentWidth","includes","header","args","setHeader","key","value","getHeaders","removeHeader","nonNullHeaders","entries","loadPgn","newlineChar","RegExp","parsedPgn","keys","output","disambiguator","ambiguities","sameRank","sameFile","ambigFrom","ambigTo","getDisambiguator","cleanMove","matches","overlyDisambiguated","ascii","perft","depth","setTurn","board","row","history","moveHistory","set","currentCount","delete","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","removeComment","getComments","deleteComments","removeComments","setCastlingRights","rights","side","getCastlingRights"],"mappings":"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AAI,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC3D,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAG1CC,EAAO,CACT,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,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"}